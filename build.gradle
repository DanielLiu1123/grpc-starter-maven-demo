plugins {
    id "org.springframework.boot" version "${springBootVersion}" apply false
    id "io.spring.dependency-management" version "${springDependencyManagementVersion}" apply false
    id "com.diffplug.spotless" version "${spotlessVersion}" apply false
    id "com.github.spotbugs" version "${spotbugsVersion}" apply false
}

allprojects {
    apply plugin: "java"
    apply plugin: "java-library"

    repositories {
        mavenCentral()
    }
    compileJava {
        options.encoding = "UTF-8"
        options.compilerArgs << "-parameters"
    }
    compileTestJava {
        options.encoding = "UTF-8"
        options.compilerArgs << "-parameters"
    }
    test {
        useJUnitPlatform()
    }
    // dependency management
    apply plugin: "io.spring.dependency-management"
    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        }
    }
    dependencies {
        compileOnly("org.projectlombok:lombok")
        annotationProcessor("org.projectlombok:lombok")
        testCompileOnly("org.projectlombok:lombok")
        testAnnotationProcessor("org.projectlombok:lombok")
    }
    // spotless
    apply plugin: "com.diffplug.spotless"
    spotless {
        encoding "UTF-8"
        java {
            toggleOffOn()
            removeUnusedImports()
            trimTrailingWhitespace()
            endWithNewline()
            palantirJavaFormat()

            custom("Refuse wildcard imports", {
              if (it =~ /\nimport .*\*;/) {
                throw new IllegalStateException("Do not use wildcard imports, 'spotlessApply' cannot resolve this issue, please fix it manually.")
              }
            } as Closure<String>)
        }
    }
    // spotbugs
    apply plugin: "com.github.spotbugs"
    spotbugs {
        spotbugsTest.enabled = false
        omitVisitors.addAll "FindReturnRef", "MethodReturnCheck"
    }
}

tasks.register("installGitHook", Copy) {
    from "$rootProject.rootDir/.githooks"
    into { new File(rootProject.rootDir, ".git/hooks") }
    fileMode 0775
}
installGitHook
